<?php

namespace service\controllers;
use common\components\CommonFun;
use common\components\enum\OrderEnum;
use common\components\FinanceSign;
use common\components\Notice;
use common\components\Push;
use common\extend\OSS\Common;
use common\models\AllocatedChecks;
use common\models\MembersAttracts;
use common\models\MembersAttractsDetail;
use common\models\MembersCurrency;
use common\models\MerchantsFreezes;
use common\models\MoneyAllocateds;
use common\models\Orders;
use common\models\PlatformFinances;
use common\models\Recommends;
use common\models\RecommendsFinances;
use common\models\Finance;
use common\models\MembersFinances;
use common\models\MembersFinancesDetail;
use common\models\MerchantsFinances;
use common\models\MerchantsFinancesDetail;
use yii\db\Exception;

class FinanceController extends BaseController {
    public $order_id;
    public $member_id;
    public $orders;
    public $status = MoneyAllocateds::STATUS_FREEZE;
    public $allocated;


    //当ORDER有数据 并且已经支付完成才进行订单分配
    public function init() {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * 分配后所有数据进入冻结状态
     * 根据状态来调用解冻事件
     * @return mixed
     * @throws \yii\base\ExitException
     * @throws \yii\db\Exception
     */
    public function actionAllocated(){
        $this->order_id = \Yii::$app->request->post('order_id');
        $this->orders = Orders::findOne($this->order_id);
        if(!$this->orders){
            $this->resultData('order_id:'.$this->order_id." not Found");
            \Yii::$app->end();
        }

        if($this->orders->allocated_id > 0 ){ //已经分配
            $this->resultData('order:'.$this->order_id." has allocated");
            \Yii::$app->end();
        }

        if($this->orders->payment_status != OrderEnum::PAY_STATUS_PAYED){
            $this->resultData('order_id:'.$this->order_id." not payment");
            \Yii::$app->end();
        }

        //先分配入库
        $finane = new Finance($this->orders->id, $this->status);

        $res = $finane->alloacted();
        if($res['status'] == 0){
            $this->resultData('allocated:'. join(",",$res['msg']));
            \Yii::$app->end();
        }

        $model = $res['msg'];

        $data = [
            'allocated_id' => $model->id
        ];
        //订单ID
        $this->orders->allocated_id = $model->id;
        $checkList = [];
        if($this->orders->save()){
            //只有在线订单和结算订单才有招商和推荐佣金
            if (in_array($model->order_type, [OrderEnum::TYPE_SHOP, OrderEnum::TYPE_ONLINEOFF_PAY])){
                if($model->attract_id != 0 && $model->attract_amount != 0){
                    $checkList['attract']['check'] = false;
                    $checkList['attract']['time'] = CommonFun::getMicrotimeToDate();
                    CommonFun::queuePush($this->service_url.'/finance/attract.html', $data);
                }

                if($model->recommend_id != 0 && $model->recommend_type != 0 && $model->recommend_amount != 0){
                    $checkList['recommend']['check'] = false;
                    $checkList['recommend']['time'] = CommonFun::getMicrotimeToDate();
                    CommonFun::queuePush($this->service_url.'/finance/recommend.html', $data);
                }

                if($model->merchants_amount > 0){
                    $checkList['merchant']['check'] = false;
                    $checkList['merchant']['time'] = CommonFun::getMicrotimeToDate();
                    CommonFun::queuePush($this->service_url.'/finance/merchant.html', $data);
                }

            }

            //平台 {兑换}
//            if($model->platform_amount > 0 || $model->coin > 0){
                $checkList['platform']['check'] = false;
                $checkList['platform']['time'] = CommonFun::getMicrotimeToDate();
                CommonFun::queuePush($this->service_url.'/finance/platform.html', $data);
//            }

            //结算和线下兑换订单直接结算
            if($model->order_type == OrderEnum::TYPE_ONLINEOFF_PAY || $model->order_type == OrderEnum::TYPE_EXCHANGE_OFF){
                $model->status = MoneyAllocateds::STATUS_ALLOCATED;
                if($model->save()){
                    Finance::submitCheck($model->id, 5);
                }
            }
        }
        if($checkList){
            $allocated = new AllocatedChecks();
            $allocated->allocated_id = $model->id;
            $allocated->result = json_encode($checkList);
            $allocated->usedate = CommonFun::getMicrotimeToDate();
            $allocated->status = 0;
            $allocated->save();
            CommonFun::log('check:'.json_encode($checkList, JSON_UNESCAPED_UNICODE), 'info','allocated');
        }

        //返回给订单回填
        return $model->id;
    }

    //商家分配
    public function actionMerchant(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);

        //当没存在时直接返回
        if(!$model){
            $this->resultData('allocated: don\'t exist');
            \Yii::$app->end();
        }

        //查询订单有没有被分配
        $merchantsFinanceDetail = MerchantsFinancesDetail::getInfo($model->id);
        if($merchantsFinanceDetail && $merchantsFinanceDetail->status == MoneyAllocateds::STATUS_ALLOCATED){
            $this->resultData('merchants:has allocated');
            \Yii::$app->end();
        }

        if(!$merchantsFinanceDetail){
            $transaction = MerchantsFinances::getDb()->beginTransaction();
            try{
                $signature = FinanceSign::allocated($model, 'merchants');
//                $merchantBalance = MerchantsFinances::getBalance($model->type_obj_id);
                $mff = MerchantsFreezes::record($model->type_obj_id, MerchantsFreezes::TYPE_ORDER, $model->merchants_amount,MerchantsFreezes::STATUS_FREEZE, $model->id, $signature);
//                $mfd = MerchantsFinancesDetail::record($model->type_obj_id, MerchantsFinancesDetail::CATEGORY_ORDER_FREEZE, MerchantsFinancesDetail::TYPE_PLUS, $model->merchants_amount, $model->order_id, $merchantBalance['balance'], $model->id, $signature, $model->status);
                $mf = MerchantsFinances::orderFreeze($model->type_obj_id, $model->merchants_amount);
                if($mff && $mf){
                    $transaction->commit();

                    //通知商家有钱到帐了
                    Push::merchantMoney($model->order_id);

                    CommonFun::log('merchant: success-商家id：'.$model->type_obj_id.' record:'.json_encode([$model->attributes, $mff], JSON_UNESCAPED_UNICODE), 'merchants','allocated/record');
                    return true;
                }

            }catch(\Exception $e) {
                $transaction->rollBack();
                CommonFun::log('merchant: error-商家id：'.$model->type_obj_id.' errors:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE), 'merchants','allocated/record');
                $this->resultData('merchants:'.$e->getMessage());
                \Yii::$app->end();
            }
        }

        return false;
    }

    //平台分配
    public function actionPlatform(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);

        //当没存在时直接返回
        if(!$model){
            $this->resultData('allocated: don\'t exist');
            \Yii::$app->end();
        }

        $platform = Finance::platformFinance($model);
        if(is_bool($platform) && $platform == true){
//            Push::orderManager($model->order_id); //后台语音播报

            return true;
        }elseif(is_int($platform) && $platform == MoneyAllocateds::STATUS_ALLOCATED){
            $this->resultData('platform:has allocated');
            \Yii::$app->end();
        }

        return false;
    }

    //推荐分配
    public function actionRecommend(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);

        //当没存在时直接返回
        if(!$model || $model->recommend_id == 0 || $model->recommend_type == 0 || $model->recommend_amount == 0){
            $this->resultData('recommend: 格式错误,无推荐ID/类型/金额');
            \Yii::$app->end();
        }

        //先检查推荐关系是否存在
        $recommend = Recommends::getOne($model->recommend_type, $model->recommend_id, $model->member_id);
        if(!$recommend){
            $this->resultData('recommend: 推荐关系不存在');
            \Yii::$app->end();
        }

        //查询分配数据是否存在
        $recommendDetail = RecommendsFinances::getInfo($model->id);
        if($recommendDetail && $recommendDetail->status == MoneyAllocateds::STATUS_ALLOCATED){
            $this->resultData('recommend: 推荐数据已经分配');
            \Yii::$app->end();
        }

        $sign_key = FinanceSign::allocated($model, 'recommend');
        if(!$recommendDetail){
            $transaction = Recommends::getDb()->beginTransaction();
            try{
                //用户
                if($model->recommend_type == Recommends::TYPE_MEMBER){
                    MembersFinances::amountFreeze(MembersFinancesDetail::CATEGORY_RECOMMEND, $model->recommend_id, $model->recommend_amount);
                }else{
                    MerchantsFinances::recommendFreeze($model->recommend_id, $model->recommend_amount);
                }
                $rf = RecommendsFinances::record($model->recommend_type, $model->recommend_id, $model->member_id, $model->order_id, $model->total_amount, $model->platform_amount, $model->recommend_amount, $model->id, $sign_key, MoneyAllocateds::STATUS_FREEZE);
                if($rf){
                    CommonFun::log('商家id：'.$model->type_obj_id.'，分配ID：'.$model->id.' success:'.json_encode([$model->attributes, $rf], JSON_UNESCAPED_UNICODE),'recommend','allocated/record');
                    $transaction->commit();
                    return true;
                }

            }catch(\Exception $e) {
                $transaction->rollBack();
                CommonFun::log('商家id：'.$model->type_obj_id.'，分配ID：'.$model->id.' errors:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE),'recommend-error','allocated/record');
                $this->resultData('recommend:'.$e->getMessage());
                \Yii::$app->end();
            }
        }
        return true;
    }

    //招商分配
    public function actionAttract(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);
        //当没存在时直接返回
        if(!$model || $model->attract_id == 0 || $model->attract_amount == 0){
            $this->resultData('attract: 格式错误，无招商ID/金额');
            \Yii::$app->end();
        }

        //先检查招商关系是否存在
        $attract = MembersAttracts::getOne($model->attract_id, $model->type_obj_id);
        if(!$attract){
            $this->resultData('attract: 招商关系不存在');
            \Yii::$app->end();
        }

        //查询分配数据是否存在
        $attractDetail = MembersAttractsDetail::getInfo($model->id);
        if($attractDetail && $attractDetail->status == MoneyAllocateds::STATUS_ALLOCATED){
            $this->resultData('attract: 招商数据已经分配');
            \Yii::$app->end();
        }

        if(!$attractDetail){
            $transaction = MembersAttracts::getDb()->beginTransaction();
            try{
                $sign_key = FinanceSign::allocated($model, 'attract');

                $ma = MembersAttractsDetail::record($model->attract_id, $model->type_obj_id, $model->order_id, $model->total_amount, $model->platform_amount, $model->attract_amount, $model->id, $sign_key, MoneyAllocateds::STATUS_FREEZE);
                $mf = MembersFinances::amountFreeze(MembersFinancesDetail::CATEGORY_ATTRACT, $model->attract_id, $model->attract_amount);
                if(!$ma || !$mf){
                    throw new Exception('招商信息记录失败');
                }else{
                    CommonFun::log('attract: success:'.json_encode([$model->attributes, $ma, $mf], JSON_UNESCAPED_UNICODE), 'attract','allocated/record');
                    $transaction->commit();
                    return true;
                }
            }catch(\Exception $e) {
                $transaction->rollBack();
                CommonFun::log('attract: error-id：'.$model->attract_id.' errors:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE), 'attract-error','allocated/record');
                $this->resultData('attract:'.$e->getMessage());
                \Yii::$app->end();
            }
        }
        return true;
    }


    //订单完成后----用户分配省币
    public function actionMember(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);

        //当没存在时直接返回
        if(!$model || ($model->member_coin == 0 && !in_array($model->order_type ,[OrderEnum::TYPE_SHOP,OrderEnum::TYPE_ONLINEOFF_PAY]))){
            $this->resultData('member:coin exist');
            \Yii::$app->end();
        }

        $mc = MembersCurrency::getInfo($model->id);

        if($mc && $mc->status == MoneyAllocateds::STATUS_ALLOCATED){
            $this->resultData('member:has coin allocated');
            \Yii::$app->end();
        }

        if(!$mc && $model->status == MoneyAllocateds::STATUS_ALLOCATED){
            $type = MembersCurrency::TYPE_INCR;
            $source = MembersCurrency::SOURCE_ORDER;
            CommonFun::log('coin: '.$allocated_id.':'.json_encode([$model->attributes, $model->member_id, $type, $source, (string)$model->order->id, $model->member_coin], JSON_UNESCAPED_UNICODE), 'member','allocated/member');
            $m = MembersCurrency::record($model->member_id, $type, $source, (string)$model->order->id, $model->member_coin, $model->status, $model->id, FinanceSign::allocated($model, 'member'));
            return $m;
        }
    }

    //招商对帐
    public function actionCheckAttract(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);
        if(!$model){
            return '分配数据不存在';
        }

        //先检查招商关系是否存在
        $sign_key = FinanceSign::allocated($model, 'attract');
        $attract = MembersAttracts::getOne($model->attract_id, $model->type_obj_id);
        if($attract) {
            //查询分配数据是否存在
            $attractDetail = MembersAttractsDetail::getInfo($model->id);

            if ($attractDetail){
                if($attractDetail->status == MoneyAllocateds::STATUS_FREEZE){
                    $transaction = MembersAttracts::getDb()->beginTransaction();
                    try{
                        $attractDetail->status = $model->status;
                        $ad = $attractDetail->save();
                        if(!$ad){
                            throw new Exception('招商状态更新失败');
                        }
                        $mf = MembersFinances::updateBalance($model->attract_id, MembersFinancesDetail::CATEGORY_ATTRACT, $model->attract_amount, $model->order_id, $model->id, $sign_key, $model->status, 'thaw');
                        if(!$mf){
                            throw new Exception('更新用户余额失败');
                        }

                        $ma = MembersAttracts::updateAmount($model->type_obj_id, $model->merchants_amount, $model->attract_amount);
                        if(!$ma){
                            throw new Exception('更新招商金额失败');
                        }

                        if($mf && $ad && $ma){
                            AllocatedChecks::record($model->id, 'attract');
                            CommonFun::log('attract: success-招商用户：'.$model->attract_id.' record:'.json_encode([$model->attributes, $ad, $mf, $ma], JSON_UNESCAPED_UNICODE), 'attract','allocated/check');
                            $transaction->commit();
                            return true;
                        }
                    }catch(\Exception $e) {
                        $transaction->rollBack();
                        CommonFun::log('attract: error-招商用户：'.$model->attract_id.' record:'.json_encode([$model->attributes, $e->getMessage()], JSON_UNESCAPED_UNICODE), 'attract','allocated/check');
                        return false;
                    }
                }else{
                    return '只有冻结数据才能分配';
                }
            }
        }
        return false;
    }

    //推荐对帐
    public function actionCheckRecommend(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);
        if(!$model){
            return '推荐数据不存在';
        }

        $recommendDetail = RecommendsFinances::getInfo($model->id);
        if($recommendDetail){
            if($recommendDetail->status == MoneyAllocateds::STATUS_FREEZE){
                $transaction = Recommends::getDb()->beginTransaction();
                try{
                    $sign_key = FinanceSign::allocated($model, 'recommend');
                    $recommendDetail->status = $model->status;
                    $rd = $recommendDetail->save();
                    if(!$rd){
                        throw new Exception('推荐状态更新失败');
                    }
                    //用户解冻并记录
                    if($model->recommend_type == Recommends::TYPE_MEMBER){
                        $mf = MembersFinances::updateBalance($model->recommend_id, MembersFinancesDetail::CATEGORY_RECOMMEND, $model->recommend_amount, $model->order_id, $model->id, $sign_key, $model->status, 'thaw');
                        CommonFun::log('recommend: success-推荐用户：'.$model->recommend_id.' record:'.json_encode([$model->attributes, $mf], JSON_UNESCAPED_UNICODE), 'recommend','allocated/check');
                        if(!$mf){
                            throw new Exception('更新推荐用户金额失败');
                        }
                    }else{
                        $merchantsFinance = MerchantsFinances::recommendThaw($model->recommend_id, $model->recommend_amount);
                        CommonFun::log('recommend: success-推荐用户：'.$model->recommend_id.' record:'.json_encode([$model->attributes, $merchantsFinance], JSON_UNESCAPED_UNICODE), 'recommend','allocated/check');
                        if(!$merchantsFinance){
                            throw new Exception('更新推荐商家金额失败');
                        }
                        $mfd = MerchantsFinancesDetail::record($model->recommend_id, MerchantsFinancesDetail::CATEGORY_RECOMMEND, MerchantsFinancesDetail::TYPE_PLUS, $model->recommend_amount, $model->order_id, $merchantsFinance['balance'], $allocated_id, $sign_key, $model->status);
                        if(!$mfd){
                            throw new Exception('更新推荐商家金额明细失败:'.json_encode($mfd->getFristErrors()));
                        }
                    }

                    //更新推荐总额
                    $rf = Recommends::updateAmount($model->member_id, $model->total_amount, $model->recommend_amount);
                    if(!$rf){
                        throw new Exception('推荐表金额更新失败');
                    }

                    if($rd && $rf){
                        AllocatedChecks::record($model->id, 'recommend');
                        CommonFun::log('recommend: success-推荐用户：'.$model->recommend_id.' record:'.json_encode([$model->attributes, $rd, $rf], JSON_UNESCAPED_UNICODE), 'recommend','allocated/check');
                    }
                    $transaction->commit();
                    return true;
                }catch(\Exception $e) {
                    $transaction->rollBack();
                    CommonFun::log('recommend: error-'.$model->recommend_type.'-'.$model->recommend_id.' record:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE), 'recommend','allocated/check');
                    return  false;
                }
            }else{
                return '只有冻结数据才能分配';
            }
        }

        return false;
    }

    //平台对账
    public function actionCheckPlatform(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);
        if(!$model){
            return '分配数据不存在';
        }

        $platform = PlatformFinances::getInfo($model->id);
        if($platform){
            if($platform->status == MoneyAllocateds::STATUS_FREEZE){
                $transaction = PlatformFinances::getDb()->beginTransaction();
                try {
                    $platform->status = MoneyAllocateds::STATUS_ALLOCATED; //更新为分配
                    if(!$platform->save()){
                        throw new Exception('平台对帐失败:'.$platform->getFirstErrors());
                    }else{
                        AllocatedChecks::record($model->id, 'platform');
                        $transaction->commit();
                        return true;
                    }
                }catch(\Exception $e) {
                    $transaction->rollBack();
                    CommonFun::log('platform: error: record:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE), 'platform','allocated/check');
                    return  false;
                }

            }else{
                return '只有冻结数据才能分配';
            }
        }
        return false;
    }

    //商家对账
    public function actionCheckMerchant(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);
        if(!$model){
            return '分配数据不存在';
        }
        $merchantsFreeze = MerchantsFreezes::getData(MerchantsFreezes::TYPE_ORDER, $model->id);
        if($merchantsFreeze){
            if($merchantsFreeze->status == MerchantsFreezes::STATUS_FREEZE){
                //查询记录是否存在
                $merchantsFinanceDetail = MerchantsFinancesDetail::getInfo($model->id);
                if($merchantsFinanceDetail && $merchantsFinanceDetail->status == MoneyAllocateds::STATUS_ALLOCATED) {
                    return '商家资金明细已经存在，不能进行分配';
                }else{
                    $transaction = MerchantsFinances::getDb()->beginTransaction();
                    try {
                        $signature = FinanceSign::allocated($model, 'merchants');
                        $merchantsFreeze->status = MerchantsFreezes::STATUS_THAW;
                        if(!$merchantsFreeze->save()){
                            throw new Exception('冻结状态更新失败');
                        }
                        $merchantsFinance = MerchantsFinances::orderThaw($model->type_obj_id, $merchantsFreeze->amount);
                        if(!$merchantsFinance){
                            throw new Exception('商家金额解冻失败');
                        }
                        $mfd = MerchantsFinancesDetail::record($model->type_obj_id, MerchantsFinancesDetail::CATEGORY_ORDER, MerchantsFinancesDetail::TYPE_PLUS, $merchantsFreeze->amount, $model->order_id, $merchantsFinance['balance'], $model->id, $signature, MoneyAllocateds::STATUS_ALLOCATED);
                        if(!$mfd){
                            throw new Exception('商家金额明细记录失败');
                        }

                        //这里处理预付金
                        if($model->is_prepaid == 1 && $model->prepaid_amount > 0){
                            $reduce = 0;
                            //比对
                            $prepaid_amount = CommonFun::doNumber($model->merchants_amount, $model->merchants_proportion, '/');
                            if($prepaid_amount == $model->prepaid_amount){
                                $reduce = $model->merchants_amount;
                            }else{
                                $reduce = $model->prepaid_amount;
                            }

                            $merchantsFinance['balance'] = CommonFun::doNumber($merchantsFinance['balance'], $reduce, '-');
                            //扣除上面已支付金额记录
                            MerchantsFinancesDetail::record($model->type_obj_id, MerchantsFinancesDetail::CATEGORY_PREPAID, MerchantsFinancesDetail::TYPE_MINUS,  $reduce, $model->order_id, $merchantsFinance['balance'], $model->id, $signature, MoneyAllocateds::STATUS_ALLOCATED);

                            //处理资金表
                            $finance = MerchantsFinances::findOne(['merchants_id'=>$model->type_obj_id]);
                            $finance->balance = $finance->balance - $reduce;
                            $finance->expenditure = $finance->expenditure + $reduce;
                            $finance->prepaid_amount = $finance->prepaid_amount - $model->prepaid_amount;
                            if(!$finance->save()){
                                throw new Exception('商家预付金扣除失败');
                            }
                        }

                        if($merchantsFreeze && $merchantsFinance && $mfd){
                            AllocatedChecks::record($model->id, 'merchant');

                            CommonFun::log('merchant: success：商家ID:'.$model->type_obj_id.' record:'.json_encode([$model->attributes, $merchantsFreeze, $merchantsFinance, $mfd], JSON_UNESCAPED_UNICODE), 'merchants','allocated/check');
                            $transaction->commit();
                            return true;
                        }
                    } catch (\Exception $e) {
                        $transaction->rollBack();
                        CommonFun::log('merchant: error-商家id：'.$model->type_obj_id.' errors:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE), 'merchants','allocated/check');
                        $check['merchants'] = false;
                    }
                }
            }
        }
        return false;
    }

    //对账
    public function actionCheck(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);
        if(!$model){
            return '分配数据不存在';
        }

        $checks = AllocatedChecks::findOne($allocated_id);
        if(!$checks) {
            return '对账数据不存在';
        }

        if($checks->status == 1){
            return '该订单已经对账完成';
        }

        $data['allocated_id'] = $allocated_id;
        $result = json_decode($checks['result'], true);
        if(isset($result['attract'])){ //招商
            if($result['attract']['check'] == false){ //未对账
                $attractDetail = MembersAttractsDetail::getInfo($model->id);
                if($attractDetail){
                    if($attractDetail->status == MoneyAllocateds::STATUS_FREEZE){
                        CommonFun::queuePush($this->service_url.'/finance/check-attract.html', $data);
                    }else if($attractDetail->status == MoneyAllocateds::STATUS_ALLOCATED){
                        //数据标识有问题，修改
                        AllocatedChecks::record($model->id, 'attract');
                    }
                }else{
                    CommonFun::queuePush($this->service_url.'/finance/attract.html', $data ,'yiiframebase', 2);
                }
            }
        }

        if(isset($result['recommend'])){ //推荐
            if($result['recommend']['check'] == false){ //未对账
                $recommendDetail = RecommendsFinances::getInfo($model->id);
                if($recommendDetail){
                    if($recommendDetail->status == MoneyAllocateds::STATUS_FREEZE){
                        CommonFun::queuePush($this->service_url.'/finance/check-recommend.html', $data, 'yiiframebase', 5);
                    }else if($recommendDetail->status == MoneyAllocateds::STATUS_ALLOCATED){
                        //数据标识有问题，修改
                        AllocatedChecks::record($model->id, 'recommend');
                    }
                }else{
                    CommonFun::queuePush($this->service_url.'/finance/recommend.html', $data);
                }
            }
        }

        if(isset($result['platform'])){ //平台
            if($result['platform']['check'] == false){ //未对账
                $platform = PlatformFinances::getInfo($model->id);
                if($platform){
                    if($platform->status == MoneyAllocateds::STATUS_FREEZE){
                        CommonFun::queuePush($this->service_url.'/finance/check-platform.html', $data ,'yiiframebase', 3);
                    }else if($platform->status == MoneyAllocateds::STATUS_ALLOCATED){
                        //数据标识有问题，修改
                        AllocatedChecks::record($model->id, 'platform');
                    }
                }else{
                    CommonFun::queuePush($this->service_url.'/finance/platform.html', $data);
                }
            }
        }

        if(isset($result['merchant'])){ //商家
            if($result['merchant']['check'] == false){ //未对账
                $merchantsFreeze = MerchantsFreezes::getData(MerchantsFreezes::TYPE_ORDER, $model->id);
                if($merchantsFreeze){
                    if($merchantsFreeze->status == MerchantsFreezes::STATUS_FREEZE){
                        CommonFun::queuePush($this->service_url.'/finance/check-merchant.html', $data);
                    }else if($merchantsFreeze->status == MoneyAllocateds::STATUS_ALLOCATED){
                        //数据标识有问题，修改
                        AllocatedChecks::record($model->id, 'merchant');
                    }
                }else{
                    CommonFun::queuePush($this->service_url.'/finance/merchant.html', $data);
                }
            }
        }


        //分配省币
        if($model->member_coin != 0){
            //查询用户是否已经分配省币
            CommonFun::queuePush($this->service_url.'/finance/member.html', $data);
        }

        return true;
    }


    //订单取消 - 所有分配后的数据还原
    public function actionCancel(){
        $allocated_id = \Yii::$app->request->post('allocated_id');
        $model = MoneyAllocateds::getInfo($allocated_id);
        if(!$model){
            return '数据不存在';
        }

        if($model->status == MoneyAllocateds::STATUS_UNTREATED || $model->status == MoneyAllocateds::STATUS_CANCLE){
            return '已经被取消';
        }

        $check = [];

        //平台部分
        if($model->platform_amount > 0 && $model->platform_proportion > 0){
            $platform = PlatformFinances::getInfo($model->id);
            if($platform && $platform->status == MoneyAllocateds::STATUS_CANCLE){
                CommonFun::log('平台：平台资金已经处理过，不要重复处理', $model->id, 'allocated/cancel');
            }else{
                $transaction = PlatformFinances::getDb()->beginTransaction();
                try{
                    $platform->status = MoneyAllocateds::STATUS_CANCLE;
                    if(!$platform->save()){
                        throw new Exception('平台取消处理失败'.json_encode($platform->getFirstErrors()));
                    }
                    $transaction->commit();
                    $check['platform'] = true;
                }catch(\Exception $e) {
                    $transaction->rollBack();
                    CommonFun::log('平台：error:'.$model->id.' record:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE), $model->id, 'allocated/cancel');
                    $check['platform'] = false;
                }
            }

        }

        //商家部分
        if($model->merchants_amount > 0 && $model->merchants_proportion > 0){
            $merchantDetail = MerchantsFinancesDetail::getInfo($model->id);
            if($merchantDetail && $merchantDetail->status == MoneyAllocateds::STATUS_CANCLE){
                CommonFun::log('商家：商家数据已经处理过，不要重复处理', $model->id, 'allocated/cancel');
            }else{
                $transaction = MerchantsFinances::getDb()->beginTransaction();
                try{
                    $merchant = MerchantsFinances::findOne(['merchants_id'=>$merchantDetail->merchants_id]);
                    if($merchantDetail->status == MoneyAllocateds::STATUS_ALLOCATED){
                        $merchant->total -= $model->merchants_amount;
                        $merchant->balance -= $model->merchants_amount;
                        $merchant->order_total -= $model->merchants_amount;
                    }else{ //冻结的，直接处理
                        $merchant->order_freeze -= $model->merchants_amount;
                    }
                    $mf = MerchantsFreezes::getData(MerchantsFreezes::TYPE_ORDER, $model->id);
                    if(!$mf){
                        throw new Exception('商家冻结数据不存在');
                    }
                    $mf->status = MerchantsFreezes::STATUS_CANCEL;
                    $merchantDetail->status = MoneyAllocateds::STATUS_CANCLE;

                    if(!$merchantDetail->save() || !$merchant->save() || !$mf->save()){
                        throw new Exception('商家财务处理失败'.json_encode([$merchantDetail->getFirstErrors(), $merchant->getFirstErrors(), $mf->getFirstErrors()]));
                    }
                    $transaction->commit();
                    $check['merchants'] = true;
                }catch(\Exception $e) {
                    $transaction->rollBack();
                    CommonFun::log('商家：error 商家ID:'.$model->type_obj_id.' errors:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE), $model->id, 'allocated/cancel');
                    $check['merchants'] = false;
                }
            }

        }

        //线上和结算有招商和推荐要退回
        if($model->order_type == 1 || $model->order_type == 3){
            //招商
            if($model->attract_id != 0 && $model->attract_amount > 0){
                $attractDetail = MembersAttractsDetail::findOne(['allocated_id'=>$model->id]);
                if($attractDetail && $attractDetail->status == MoneyAllocateds::STATUS_CANCLE){
                    CommonFun::log('招商：招商数据已经处理过，不要重复处理', $model->id, 'allocated/cancel');
                }else{
                    if($attractDetail){
                        $transaction = MembersAttractsDetail::getDb()->beginTransaction();
                        try{
                            $memberFinance = MembersFinances::findOne(['member_id'=>$attractDetail->member_id]);
                            if($attractDetail->status == MoneyAllocateds::STATUS_ALLOCATED){
                                $memberFinance->balance -= $attractDetail->amount;
                                $memberFinance->attract_amount -= $attractDetail->amount;
                                $memberFinanceDetail = MembersFinancesDetail::findOne(['allocated_id'=>$model->id, 'category'=>MembersFinancesDetail::CATEGORY_ATTRACT]);
                                $memberFinanceDetail->status = MoneyAllocateds::STATUS_CANCLE;
                                if(!$memberFinanceDetail->save()){
                                    throw new Exception('用户资金明细写入失败'.json_encode($memberFinanceDetail->getFirstErrors()));
                                }
                            }else{
                                $memberFinance->attract_freeze -= $attractDetail->amount;
                            }

                            if(!$memberFinance->save()){
                                throw new Exception('用户资金写入失败'.json_encode($memberFinance->getFirstErrors()));
                            }

                            $memberAttract = MembersAttracts::findOne(['member_id'=>$attractDetail->member_id, 'merchants_id'=>$attractDetail->merchants_id]);
                            $memberAttract->merchants_total_amount -= $model->merchants_amount;
                            $memberAttract->amount -= $model->attract_amount;
                            if(!$memberAttract->save()){
                                throw new Exception('用户招商资金写入失败'.json_encode($memberAttract->getFirstErrors()));
                            }
                            $attractDetail->status = MoneyAllocateds::STATUS_CANCLE;
                            if(!$attractDetail->save()){
                                throw new Exception('用户招商资金明细写入失败'.json_encode($attractDetail->getFirstErrors()));
                            }
                            $transaction->commit();
                            $check['attract'] = true;
                        }catch(\Exception $e) {
                            $transaction->rollBack();
                            CommonFun::log('招商：用户ID:'.$model->attract_id.' errors:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE), $model->id, 'allocated/cancel');
                            $check['attract'] = false;
                        }
                    }
                }


            }

            //推荐
            if($model->recommend_type != 0 && $model->recommend_id != 0 && $model->recommend_amount > 0){
                $recommendDetail = RecommendsFinances::getInfo($model->id);
                if($recommendDetail && $recommendDetail->status == MoneyAllocateds::STATUS_CANCLE){
                    CommonFun::log('推荐：推荐数据已经处理过，不要重复处理', $model->id, 'allocated/cancel');
                }else{
                    if($recommendDetail){
                        $transaction = Recommends::getDb()->beginTransaction();
                        try{
                            if($model->recommend_type == Recommends::TYPE_MEMBER){ //用户
                                $memberFinance = MembersFinances::findOne(['member_id'=>$model->recommend_id]);
                                if($recommendDetail->status == MoneyAllocateds::STATUS_ALLOCATED){
                                    $memberFinance->balance -= $recommendDetail->amount;
                                    $memberFinance->recommend_amount -= $recommendDetail->amount;
                                    $memberFinanceDetail = MembersFinancesDetail::findOne(['allocated_id'=>$model->id, 'category'=>MembersFinancesDetail::CATEGORY_RECOMMEND]);
                                    $memberFinanceDetail->status = MoneyAllocateds::STATUS_CANCLE;
                                    if(!$memberFinanceDetail->save()){
                                        throw new Exception('用户资金明细写入失败'.json_encode($memberFinanceDetail->getFirstErrors()));
                                    }
                                }else{
                                    $memberFinance->recommend_freeze -= $recommendDetail->amount;
                                }
                                if(!$memberFinance->save()){
                                    throw new Exception('用户资金写入失败'.json_encode($memberFinance->getFirstErrors()));
                                }
                            }else{ //商家
                                $mf = MerchantsFinances::findOne(['merchants_id'=>$model->recommend_id]);
                                if($recommendDetail->status == MoneyAllocateds::STATUS_ALLOCATED){
                                    $mf->balance -= $recommendDetail->amount;
                                    $mf->total -= $recommendDetail->amount;
                                    $mf->recommend_total -= $recommendDetail->amount;

                                    $mdf = MerchantsFinancesDetail::findOne(['allocated_id'=>$model->id, 'category'=>MerchantsFinancesDetail::CATEGORY_RECOMMEND]);
                                    $mdf->status = MoneyAllocateds::STATUS_CANCLE;
                                    if(!$mdf->save()){
                                        throw new Exception('更新商家资金明细失败'.json_encode($mdf->getFirstErrors()));
                                    }
                                }else{
                                    $mf->recommend_freeze -= $recommendDetail->amount;
                                }
                                if(!$mf->save()){
                                    throw new Exception('更新商家资金失败'.json_encode($mf->getFirstErrors()));
                                }

                            }
                            $recommend = Recommends::findOne(['type'=>$model->recommend_type, 'obj_id'=>$model->recommend_id]);
                            $recommend->total_amount -= $recommendDetail->total_amount;
                            $recommend->amount -= $recommendDetail->amount;
                            if(!$recommend->save()){
                                throw new Exception('推荐资金更新失败');
                            }

                            $recommendDetail->status = MoneyAllocateds::STATUS_CANCLE;
                            if(!$recommendDetail->save()){
                                throw new Exception('推荐资金明细更新失败');
                            }

                            $transaction->commit();
                            $check['recommend'] = true;
                        }catch(\Exception $e) {
                            $transaction->rollBack();
                            CommonFun::log('推荐: error-'.$model->recommend_type.'-'.$model->recommend_id.' record:'.json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE),$model->id,'allocated/cancel');
                            $check['recommend'] = false;
                        }
                    }
                }

            }
        }

        CommonFun::log('record:'.json_encode($check), $model->id, 'allocated/cancel');
        $c = true;
        foreach ($check as $item){
            if($item == false){
                $c = false;
                continue;
            }
        }
        if($c){
            $model->status = MoneyAllocateds::STATUS_CANCLE;
            if($model->save())
                return true;
        }

        return false;
    }
}
